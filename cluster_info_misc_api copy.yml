---
- name: get cluster info using scale_computing.hypercore.api module
  hosts: all # use ansible-playbook -l group to limit application to specific groups
  connection: ansible.builtin.local
  gather_facts: False
  #strategy: host_pinned #free  #allows each cluster to start next task before all clusters have finished current task

  
  tasks:
  - name: get hypercore cluster object using REST api
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/Cluster
    check_mode: no        
    register: cluster_info
    tags:
    - apioutput
  - name: debug show
    ansible.builtin.debug:
      var: cluster_info 
    tags:
    - apioutput

  - name: get hypercore node object using REST api
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/Node
    check_mode: no
    register: node_info
    tags:
    - checkversion

  - name: Run timeZone role
    ansible.builtin.include_role:
      name: timeZone
    
  - name: Run timeSource role
    ansible.builtin.include_role:
      name: timeSource
    tags:
    - timeSource



  # - name: get hypercore Registration object using REST api
  #   scale_computing.hypercore.api:
  #     action: get
  #     cluster_instance:
  #       host: "https://{{inventory_hostname }}"
  #       username: "{{scale_user}}"
  #       password: "{{scale_pass}}"
  #     endpoint: /rest/v1/Registration
  #   register: Registration   

  - name: get hypercore OIDC object using REST api # single uuid record. 
    scale_computing.hypercore.api:
      action: get
      cluster_instance:
        host: "https://{{inventory_hostname }}"
        username: "{{scale_user}}"
        password: "{{scale_pass}}"
      endpoint: /rest/v1/OIDCConfig
    register: OIDCConfig    

  - name: get hypercore DNSConfig object using REST api # single uuid dnsconfig_guid  - record.searchDomains list record.serverIPs list
    scale_computing.hypercore.api:
      action: get
      cluster_instance:
        host: "https://{{inventory_hostname }}"
        username: "{{scale_user}}"
        password: "{{scale_pass}}"
      endpoint: /rest/v1/DNSConfig
    register: DNSConfig 

  # - name: get conditions
  #   scale_computing.hypercore.api:
  #     action: get
  #     cluster_instance:
  #       host: "{{ inventory_hostname }}"
  #       username: "{{scale_user}}"
  #       password: "{{scale_pass}}"
  #     endpoint: /rest/v1/Condition
  #   register: conditions
  #   when: icosVersion is search("9.2.4")

  # - name: List all isos
  #   scale_computing.hypercore.iso_info:
  #     cluster_instance:
  #       host: "https://{{ inventory_hostname }}"
  #       username: "{{scale_user}}"
  #       password: "{{scale_pass}}"
  #   register: iso_results

  # - name: output iso_results
  #   ansible.builtin.debug:
  #     var: iso_results 


  # - name: MonitoringConfig #monitoringconfig_guid - have turned it off on all my lab / home clusters 
  #   scale_computing.hypercore.api:
  #     action: delete  #delete existing monitoring config
  #     cluster_instance:
  #       host: "https://{{ inventory_hostname }}"
  #       username: "{{scale_user}}"
  #       password: "{{scale_pass}}"
  #     endpoint: /rest/v1/MonitoringConfig/monitoringconfig_guid
  #   register: monitoring
