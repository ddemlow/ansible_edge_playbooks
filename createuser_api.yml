- name: Create ansible user with admin role using hypercore.api module
  hosts: edge # use ansible-playbook -l group to limit application to specific groups
  connection: local
#  strategy: host_pinned # free  #allows each cluster to start next task before all clusters have finished current task
  environment:  #if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_HOST: "https://{{ inventory_hostname }}"
    SC_USERNAME: "{{ scale_admin_user }}"
    SC_PASSWORD: "{{ scale_admin_pass }}"

  tasks:
  - name: Get cluster roles in order to find desired role UUID
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/Role
    register: roles

  - name: Set uuid for cluster admin role
    ansible.builtin.set_fact:
      admin_role_uuid: "{{ item.uuid }}"
    when: item.name == "Admin"
    loop: '{{ roles.record | from_yaml_all | list }}'

  - name: Get users to determine if ansible user already exists
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/User
    register: hcuser

  - name: Get uuid ansible user if exist
    ansible.builtin.set_fact:
      ansible_user_uuid: "{{ item.uuid }}" # will be not defined if ansible user doesn't exist
    when: item.username == "ansible"
    loop: '{{ hcuser.record | from_yaml_all | list }}'

  - name: Create ansible user with admin role # will be skipped if user already exists
    scale_computing.hypercore.api:
      action: post
      endpoint: /rest/v1/User
      data:
        username: "ansible"
        password: "ansible"
        fullName: "Account for running Ansible playbooks with admin role"
        roleUUIDs: ["{{ admin_role_uuid }}"]
    when: ansible_user_uuid is not defined
