---
- name: simple vm deploy #use -l filter to specify cluster 
  hosts: all
  vars: 
    - vmname: semaphore
  connection: ansible.builtin.local
  gather_facts: False
  #strategy: host_pinned #free  #allows each cluster to start next task before all clusters have finished current task
  environment:
    SC_HOST: "https://{{ inventory_hostname }}"  #this works when executing ansible-pull directly on SCEL host
    SC_USERNAME: "admin"
    SC_PASSWORD: "admin"

  tasks:

  - name: Ubuntu20_04 template - Ubuntu 20.04 - import if not present
    scale_computing.hypercore.vm_import:
      vm_name: ubuntu20_04
      http_uri:
        path: 'https://github.com/ddemlow/RestAPIExamples/raw/master/ubuntu20_04-cloud-init'
        file_name: ubuntu20_04-cloud-init.xml
    ignore_errors: true  #import errors are not uncommon depdending on network connection to smb / https source
    register: ubuntu20_04
    tags:    # tags - allow selective task execution with -t at command line
      - template

  - name: clone and configure ad hoc "{{vmname}}"
    scale_computing.hypercore.vm_clone:
      vm_name: "{{vmname}}"
      source_vm_name: ubuntu20_04
      cloud_init:
        user_data: |
          #cloud-config
          password: "password"
          chpasswd: { expire: False }
          ssh_pwauth: True
          apt: {sources: {docker.list: {source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable', keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88}}}
          packages: [qemu-guest-agent, docker-ce, docker-ce-cli, docker-compose, ansible, git, unzip]
          bootcmd:
            - [ sh, -c, 'sudo echo GRUB_CMDLINE_LINUX="nomodeset" >> /etc/default/grub' ]
            - [ sh, -c, 'sudo echo GRUB_GFXPAYLOAD_LINUX="1024x768" >> /etc/default/grub' ]
            - [ sh, -c, 'sudo echo GRUB_DISABLE_LINUX_UUID=true >> /etc/default/grub' ]
            - [ sh, -c, 'sudo update-grub' ]
          runcmd:
            - [ systemctl, restart, --no-block, qemu-guest-agent ]
            - [ snap install semaphore ]
          write_files:
          # configure docker daemon to be accessible remotely via TCP on socket 2375
          - content: |
              [Service]
              ExecStart=
              ExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2375
            path: /etc/systemd/system/docker.service.d/options.conf
        meta_data: |
          dsmode: local
          local-hostname: "{{vmname}}"

#    register: ansible_runner
#   tags:    # tags - allow selective task execution with -t at command line
#    - ansible

  - name: ansible_runner disk desired configuration
    scale_computing.hypercore.vm_disk:
      vm_name: "{{vmname}}"
      items:
        - disk_slot: 0
          type: virtio_disk
          size: "{{ '100 GB' | human_to_bytes }}" #50GB | human to bytes results in 53.7GB VSD in Hypercore
          tiering_priority_factor: 4
      state: present

  - name: anbsible_runner Vm desired configuration and state
    scale_computing.hypercore.vm_params:
      vm_name: "{{vmname}}"
      memory: "{{ '4 GB' | human_to_bytes }}"
      description: 
      tags:
        - "{{vmname}}"
        - ansible
      vcpu: 4
      power_state: start
