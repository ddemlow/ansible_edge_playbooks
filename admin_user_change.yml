- name: create or update default admin user (admin/admin) with inventory based credentials 
  hosts: edge #use ansible-playbook -l group to limit application to specific groups
  connection: local
  no_log: false
  strategy: host_pinned #free  #allows each cluster to start next task before all clusters have finished current task
  environment:  #if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_HOST: "https://{{ inventory_hostname }}"
    SC_USERNAME: "{{ scale_user }}"
    SC_PASSWORD: "{{ scale_pass }}"

  tasks:
  - name: get cluster roles in order to find desired role UUID
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/Role
    register: roles

  - name: set uuid for cluster admin role  
    ansible.builtin.set_fact:
      admin_role_uuid: "{{ item.uuid }}"
    when: item.name == "admin"
    loop: '{{ roles.record | from_yaml_all | list }}'
    no_log: false
    
  - name: get users to determine if admin user already exists
    scale_computing.hypercore.api:
      action: get
      endpoint: /rest/v1/User
    register: User
 
  - name: Clear admin_user_uuid # clear array before loop to populate
    ansible.builtin.set_fact:
      admin_user_uuid: []   

  - name: Loop to Check if syslog_uuid contains syslog_ip from inventory in ANY syslog_uuid entry - if it is add to syslog_uuid #note duplicate entries are possible
    ansible.builtin.set_fact:
      admin_user_uuid: "{{ admin_user_uuid + ([{'uuid':item.uuid | trim }]) }}" 
    when: item.username == scale_admin_user  # setting to admin keeps getting masked out even in compare "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER" - oter values work
    loop: "{{ User.record | from_yaml | list }}"
    loop_control:
      loop_var: item
    ignore_errors: false
    no_log: false

  # - name: get uuid admin user if exist 
  #   ansible.builtin.set_fact:
  #     admin_user_uuid: "{{ item.uuid }}" #will be not defined if admin user doesn't exist or has already been renamed - need to handle?
  #   when: item.username == "admin"  
  #   loop: '{{ User.record | from_yaml_all | list }}'
  
  - name: output admin uuid
    ansible.builtin.debug:
      msg: "{{ admin_user_uuid }}"
      

  # - name: Update admin user with admin role #will be skipped if user already exists
  #   scale_computing.hypercore.api:
  #     action: patch
  #     endpoint: /rest/v1/User/{{ admin_user_uuid }}
  #     data:
  #       username: "{{ scale_admin_user }}"
  #       password: "{{ scale_admin_pass }}"
  #       fullName: "account updated from ansible inventory "
  #       roleUUIDs: ["{{ admin_role_uuid }}"]
  #   when: admin_user_uuid != []
  