---
# tasks file for pos
# as of 12/2022 - deploys single node k3s cluster - clones a demo repo and applies deployment (exposed via nodeport)

  # - name: remove existing site POS VM #comment out when not needed ... can be used to remove and re-create all existing POS vms
  #   scale_computing.hypercore.vm:
  #     vm_name: "pos-{{ site_name }}"
  #     state: absent

  - name: Clone pos vm for store - if not present - provide cloud-init config
    scale_computing.hypercore.vm_clone:
      vm_name: "pos-{{ site_name }}"
      source_vm_name: ubuntu20_04
      cloud_init:
        user_data: |
          #cloud-config
          password: "password"
          chpasswd: { expire: False }
          ssh_pwauth: True
          ssh_authorized_keys: # Add your ssh public key for publickey authentication
              - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDihWWhjoPj8KVLtdLDwNJQ71zi9An0iUFjefRWu2Eju ddemlow@scalecomputing.com
          disable_root: false # allow ssh root login
          ssh_pwauth: True
          ssh_import_id:  gh:ddemlow          
          # apt: {sources: {docker.list: {source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable', keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88}}} docker-ce, docker-ce-cli, docker-compose, 
          packages: [ git, unzip, curl, apt-transport-https, qemu-guest-agent]          
          bootcmd:
            - [ sh, -c, 'sudo echo GRUB_CMDLINE_LINUX="nomodeset" >> /etc/default/grub' ]
            - [ sh, -c, 'sudo echo GRUB_GFXPAYLOAD_LINUX="1024x768" >> /etc/default/grub' ]
            - [ sh, -c, 'sudo echo GRUB_DISABLE_LINUX_UUID=true >> /etc/default/grub' ]
            - [ sh, -c, 'sudo update-grub' ]
          runcmd:
            - 'curl -sfL "https://get.k3s.io" | K3S_TOKEN=Scale2010 K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="server --cluster-init" sh -'
            - 'curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
            - 'az login --service-principal -u "3933c163-3dcc-4248-83fc-b1cbe2ee6865" -p "I8o8Q~F9Qn9tSY4LazVGDgZe1PBwmRsbVDlUubDd" --tenant "76d4c62a-a9ca-4dc2-9187-e2cc4d9abe7f"'
            - 'az extension add --name connectedk8s'
            - 'export HOSTNAME=$(cat /proc/sys/kernel/hostname)'
            - 'az connectedk8s connect --name $HOSTNAME --resource-group AzureArcTest --kube-config /etc/rancher/k3s/k3s.yaml'
            - 'apt install qemu-guest-agent -y'
            - [ systemctl, restart, --no-block, qemu-guest-agent ]
            - 'git clone https://github.com/microservices-demo/microservices-demo.git'
            - 'kubectl create namespace sock-shop'
            - 'kubectl apply -f /microservices-demo/deploy/kubernetes/complete-demo.yaml'
            
            
        meta_data: |
          dsmode: local
          # network-interfaces: |
          #   auto lo
          #   iface lo inet loopback
          #   iface ens3 inet static
          #     address {{ pos_address }}
          #     netmask 255.255.255.0
          #     gateway 192.168.1.1
              # dns-nameservers 8.8.8.8
          local-hostname: "pos-{{ site_name }}"
    tags:    # tags - allow selective task execution with -t at command line
      - pos

  - name: Pos VM disk desired configuration
    scale_computing.hypercore.vm_disk:
      vm_name: "pos-{{ site_name }}"
      items:
        - disk_slot: 0
          type: virtio_disk
          size: "{{ '300 GB' | human_to_bytes }}"
          tiering_priority_factor: 1
      state: present
    tags:    # tags - allow selective task execution with -t at command line
      - pos

  - name: Pos VM desired configuration and state
    scale_computing.hypercore.vm_params:
      vm_name: "pos-{{ site_name }}"
      memory: "{{ '6 GB' | human_to_bytes }}"
      description: "pos vm for {{ site_name }} "
      snapshot_schedule: snap-daily-midnight
      tags:
        - demo
        - k3s
        - ansible_group__pos
        - ansible_group__storeapps # this will create tag used by hypercore inventory plugin when executing towards VM hosts
        - ansible_user__ubuntu
      vcpu: 4
      power_state: start
    tags:    # tags - allow selective task execution with -t at command line
      - pos

  # - name: Set POS VM node affinity by peer ID - prefer node 3, clear any existing backup node
  #   scale_computing.hypercore.vm_node_affinity:
  #     vm_name: "pos-{{ site_name }}"
  #     strict_affinity: false
  #     preferred_node:
  #       peer_id: 1
  #     backup_node:
  #       node_uuid: ""    #allow hypercore to start vm on best available node if preferred is down
  #   ignore_errors: yes # - task will fail on single node chesks will log failure if out of compliance - could add when node > 1 condition
