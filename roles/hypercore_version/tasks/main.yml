
  # - name: Check if there is already an update in progress
  #   scale_computing.hypercore.version_update_status_info:
  #   register: update_status_before_update

  # - name: Current update status # TODO could end play if update already in progress
  #   ansible.builtin.debug:
  #     var: update_status_before_update


  - name: Get hypercore cluster info
    scale_computing.hypercore.cluster_info:
    register: cluster_info

  - name: Show cluster info
    ansible.builtin.debug:
      var: cluster_info

  - name: end execution if cluster is already at desired version
    meta: end_host
    when: cluster_info.record.icos_version == hypercore_desired_version

  - name: Get a list of updates  #TODO could end play if no updates available
    scale_computing.hypercore.version_update_info:
    register: result      

  - name: Get node info
    scale_computing.hypercore.node_info:
    register: node_info

  - name: Show node info
    ansible.builtin.debug:
      var: node_info

  # - name: Check if single-node system - fail if it is - commented as soon single node systems may allow some updates to work with vms running
  #   ansible.builtin.fail:
  #     msg: >-
  #       The play should be not be used with single node systems.
  #       This system has {{ node_info.records | length }} nodes.
  #   when: node_info.records | length == 1

  # ===================================================================

  - name: Update
    block:
      - name: Get available updates
        scale_computing.hypercore.version_update_info:
        register: available_updates

      - name: Show available updates
        ansible.builtin.debug:
          var: available_updates

      - name: Check if desired update is available - fail if not available # TODO - this fails if cluster is already at desired version
        ansible.builtin.fail:
          msg: >-
            Requested update {{ hypercore_desired_version }} is not
            in available_updates {{ available_updates.records | map(attribute='uuid') | list }}
        when: not hypercore_desired_version in (available_updates.records | map(attribute='uuid') | list)
        ignore_errors: false

  - name: apply desired version to cluster or SNS                     #will submit update request and continue without monitoring
    scale_computing.hypercore.version_update:
      icos_version: "{{ hypercore_desired_version }}"
    register: update_desired

  - name: use update check from sns update role #has inner and outer retry loops - does not return failure of update itself, simply update progress has completed/terminated
    ansible.builtin.import_role:
      name: scale_computing.hypercore.version_update_single_node
      tasks_from: update_status_check.yml

  - name: Get version update status
    scale_computing.hypercore.version_update_status_info:
    register: version_update_status

  # - name: display version_update_status
  #   debug:
  #     var: version_update_status

  - name: Report failed when update status is TERMINATING (vs. COMPLETED) - on single node - citing running VMs
    ansible.builtin.debug:
      msg: update on single node requires VM shutdown "{{ version_update_status.record.update_status_details }}"
    when: version_update_status.record.update_status == "TERMINATING" and ( node_info.records | length == 1 ) and 'running VMs' in version_update_status.record.update_status_details  

  - name: If update fails on single node due to VMs running - retry with role that does  VM shutdown and restart
    include_role:
      name: scale_computing.hypercore.version_update_single_node
    vars:
      version_update_single_node_desired_version: "{{ hypercore_desired_version }}"
    when: version_update_status.record.update_status == "TERMINATING" and ( node_info.records | length == 1 ) and 'running VMs' in version_update_status.record.update_status_details  

