- name: Loop to check HyperCore update status # called from main update playbook
  block:

  - name: Increment retry count for outer loop
    ansible.builtin.set_fact:
      retry_count: "{{ 0 if retry_count is undefined else retry_count | int + 1 }}"

  - name: pause before checking update status - checks will report FAILED-RETRYING until update COMPLETE/TERMINATED  
    ansible.builtin.wait_for:
      timeout: 60
    delegate_to: localhost

  - name: check update/update_status.json - will report FAILED-RETRYING until update COMPLETE/TERMINATED #this fails when web server / node is rebooted and until becomes undefined - doesn't keep retrying - thus need outer rescue / loop 
    uri:
      url: http://{{ansible_host}}/update/update_status.json
      method: GET
      return_content: yes
      status_code: 200
      body_format: json
    register: update_status 
    until:  update_status.json.updateStatus.masterState == "COMPLETE" | default(omit) or update_status.json.updateStatus.masterState == "TERMINATING" | default(omit) 
    retries: 200
    delay: 60
    ignore_unreachable: true # need to test that this fails but allows rescue below execute

  rescue:
    - fail:
        msg: Maximum retries of grouped tasks reached
      when: retry_count | int == 20

    - debug:
        msg: "update status check failed due to server down / restart - retrying"

    - include_tasks: check_hc_update.yml  # calls self recursively  